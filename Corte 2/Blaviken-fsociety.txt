Implementa un método que determine si existe un camino válido entre dos vértices
Implementa un método que determine si el grafo tiene, al menos, un ciclo
Implementa un método que determine si un grafo es fuertemente conexo
Determinar si un grafo es completo
Implementa un método que Cuente la cantidad de ciclos simples. agrega dos funciones auxiliares que nos ayuden a determinar si un vértice ha sido visitado o si hay un ciclo en el camino actual.


#EJERCICIO 1
Implementa un método para indicar los vértices con un grado de entrada específico.

#EJERCICIO 2
Implementa un método que determine si existe un camino desde dicho vértice a todos los demás del grafo

Además, al terminar de recorrer todos los vértices adyacentes de un vértice actual, se vacía la lista de visitados para que los ciclos encontrados no interfieran con la búsqueda de ciclos en los vértices siguientes.

Con este metodo: 

def existeCaminoHaciaTodos(self, vertice_inicial):
    if self.buscarVertice(vertice_inicial) is None:
        return None
    visitados = set()
    self.__dfs_camino_hacia_todos(visitados, vertice_inicial)
    return len(visitados) == len(self.verVertices())

def __dfs_camino_hacia_todos(self, visitados:set, vertice_actual):
    visitados.add(vertice_actual)
    adyacentes_actual = self.buscarVertice(vertice_actual)
    for ady_actual in adyacentes_actual:
        if ady_actual not in visitados:
            self.__dfs_camino_hacia_todos(visitados, ady_actual)

créame un ejemplo donde yo pueda observar su funcionamiento